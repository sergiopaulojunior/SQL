USE softblue;

-- Exercício 1
-- Utilizando o banco de dados criado nos módulos anteriores, realize as seguintes instruções:
-- Selecione os nomes de todos os alunos que já fizeram alguma matrícula na Softblue, sem repetição;
SELECT DISTINCT(aluno)
FROM aluno;

-- Exiba o nome do aluno mais antigo da Softblue;
SELECT MIN(aluno)
FROM aluno;

-- Exiba o nome do aluno mais recente da Softblue;
SELECT MAX(aluno)
FROM aluno;

-- Exiba o nome do terceiro aluno mais antigo da Softblue;
SELECT aluno
FROM aluno
LIMIT 2, 1; -- PULA 2 EXIBE 1

-- Exiba a quantidade de cursos que já foram vendidos pela Softblue;
SELECT COUNT(codigo)
FROM pedido;

-- Exiba o valor total já arrecadado pelos cursos vendidos pela Softblue;
SELECT SUM(valor)
FROM pedido_detalhe;


-- Exiba o valor médio cobrado por curso para o pedido cujo CODIGO é 2;
SELECT AVG(valor)
FROM pedido_detalhe
WHERE curso = 2;

-- Exiba o valor do curso mais caro da Softblue;
SELECT MAX(valor)
FROM curso;

-- Exiba o valor do curso mais barato da Softblue;
SELECT MIN(valor)
FROM curso;

-- Exiba o valor total de cada pedido realizado na Softblue;
SELECT pedido, SUM(valor)
FROM pedido_Detalhe
GROUP BY(pedido);

-- Exiba os nomes dos instrutores da Softblue e a quantidade de cursos que cada um tem sob sua responsabilidade;
SELECT instrutor.instrutor, COUNT(curso.codigo)
FROM curso
INNER JOIN instrutor ON curso.instrutor = instrutor.codigo
GROUP BY instrutor;

-- Exiba o número do pedido, nome do aluno e valor para todos os pedidos realizados na Softblue cujo valor total sejam maiores que 500;
SELECT PEDIDO, ALUNO.ALUNO, SUM(VALOR) 
FROM PEDIDO_DETALHE 
INNER JOIN PEDIDO ON PEDIDO_DETALHE.PEDIDO = PEDIDO.CODIGO 
INNER JOIN ALUNO ON PEDIDO.ALUNO = ALUNO.CODIGO 
GROUP BY PEDIDO HAVING SUM(VALOR) > 500;

-- Exiba o número do pedido, nome do aluno e quantos cursos foram comprados no pedido para todos os pedidos realizados na Softblue que compraram dois ou mais cursos;
SELECT PEDIDO, ALUNO.ALUNO, COUNT(*) 
FROM PEDIDO_DETALHE 
INNER JOIN PEDIDO ON PEDIDO_DETALHE.PEDIDO = PEDIDO.CODIGO 
INNER JOIN ALUNO ON PEDIDO.ALUNO = ALUNO.CODIGO 
GROUP BY PEDIDO HAVING COUNT(*) > 1;

-- Exiba o nome e endereço de todos os alunos que morem em Avenidas (Av.);
SELECT aluno, endereco
FROM aluno
WHERE endereco LIKE ('Av%');

-- Exiba os nomes dos cursos de Java da Softblue;
SELECT curso
FROM curso
WHERE curso LIKE 'Java%';


select * from curso;
-- Exercício 2
-- Utilizando o banco de dados criado nos módulos anteriores, realize as seguintes instruções:
-- Utilizando subquery, exiba uma lista com os nomes dos cursos disponibilizados pela Softblue informando para cada curso qual o seu menor valor de venda já praticado;
SELECT curso, (SELECT MIN(valor)
FROM pedido_detalhe
WHERE pedido_detalhe.curso = curso.codigo) AS menor_valor FROM curso;

-- Utilizando subquery e o parâmetro IN, exiba os nomes dos cursos disponibilizados pela Softblue cujo tipo de curso seja 'Programação';
SELECT curso
FROM curso
WHERE tipo IN (
SELECT codigo FROM curso WHERE tipo = 'Programação'
);

SELECT CURSO FROM CURSO WHERE TIPO IN (SELECT CODIGO FROM TIPO WHERE TIPO = 'Programação');

-- Utilizando subquery e o parâmetro EXISTS, exiba novamente os nomes dos cursos disponibilizados pela Softblue cujo tipo de curso seja 'Programação';
SELECT CURSO FROM CURSO WHERE EXISTS (SELECT CODIGO FROM TIPO WHERE TIPO.CODIGO = CURSO.TIPO AND TIPO.TIPO = 'Programação');

-- Exiba uma lista com os nomes dos instrutores da Softblue e ao lado o total acumulado das vendas referente aos cursos pelo qual o instrutor é responsável;
SELECT instrutor, (SELECT SUM(pedido_detalhe.valor)
FROM pedido_detalhe 
INNER JOIN curso
ON pedido_detalhe.curso = curso.codigo
WHERE curso.instrutor = instrutor.codigo) AS valor_total FROM instrutor; 

-- Crie uma visão que exiba os nomes dos alunos e quanto cada um já comprou em cursos;
CREATE VIEW total_gasto_alunos AS
SELECT aluno, (SELECT SUM(pedido_detalhe.valor)
FROM pedido_detalhe
INNER JOIN pedido
ON pedido_detalhe.pedido = pedido.codigo
WHERE pedido.aluno = aluno.codigo) AS valor_gasto FROM aluno;

SELECT * FROM total_gasto_alunos;
